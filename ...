diff --git a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/DefaultNotificationHandler.java b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/DefaultNotificationHandler.java
index 1ffdea5..77d8325 100644
--- a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/DefaultNotificationHandler.java
+++ b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/DefaultNotificationHandler.java
@@ -1,4 +1,100 @@
 package org.wso2.carbon.identity.event.handler.notification;
 
-public class DefaultNotificationHandler {
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.event.stream.core.EventStreamService;
+import org.wso2.carbon.identity.base.IdentityRuntimeException;
+import org.wso2.carbon.identity.core.handler.InitConfig;
+import org.wso2.carbon.identity.event.IdentityEventException;
+import org.wso2.carbon.identity.event.event.Event;
+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;
+import org.wso2.carbon.identity.event.handler.notification.internal.NotificationHandlerDataHolder;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * DefaultNotificationHandler is based on simple key/value parameters which was send by an event to any given stream.
+ *
+ * We can define the streamid and the notification template from the config file (identity-event.properties)
+ * But notification template is not implemented as the default implementation.
+ *
+ */
+public class DefaultNotificationHandler extends AbstractEventHandler {
+    private static final Log log = LogFactory.getLog(DefaultNotificationHandler.class);
+
+    private static final String STREAM_DEFINITION_ID = "stream_id" ;
+    private static final String NOTIFICATION_TEMPLATE_TYPE = "notification_template" ;
+
+
+
+    @Override
+    public void handleEvent(Event event) throws IdentityEventException {
+
+        Map<String, String> arbitraryDataMap = new HashMap<>();
+
+        for (Map.Entry<String, Object> entry : event.getEventProperties().entrySet()) {
+            if (entry.getValue() instanceof String) {
+                arbitraryDataMap.put(entry.getKey(), (String) entry.getValue());
+            }
+        }
+        Map<String, String> notificationTemplate = buildNotificationData(event);
+        arbitraryDataMap.putAll(notificationTemplate);
+
+        publishToStream(arbitraryDataMap, event);
+    }
+
+    /**
+     * This method will build the specific notification data which under this module.
+     *
+     * @param event
+     * @return
+     * @throws IdentityEventException
+     */
+    protected Map<String, String> buildNotificationData(Event event) throws IdentityEventException{
+        return new HashMap<>();
+    }
+
+
+    /**
+     *
+     * This method is used to publish the event to the event service.
+     *
+     * @param arbitraryDataMap
+     * @param event
+     * @throws IdentityEventException
+     */
+    protected void publishToStream(Map<String, String> arbitraryDataMap, Event event) throws IdentityEventException{
+
+        EventStreamService service = NotificationHandlerDataHolder.getInstance().getEventStreamService();
+        org.wso2.carbon.databridge.commons.Event databridgeEvent = new org.wso2.carbon.databridge.commons.Event();
+        databridgeEvent.setTimeStamp(System.currentTimeMillis());
+
+        try {
+            databridgeEvent.setStreamId(getStreamDefinitionID(event));
+        } catch (IdentityEventException e) {
+            throw new IdentityEventException("Stream definition was not specified in the " +
+                    "identity-event.properties file for " + event.getEventName());
+        }
+
+        databridgeEvent.setArbitraryDataMap(arbitraryDataMap);
+        service.publish(databridgeEvent);
+    }
+
+    @Override
+    public void init(InitConfig configuration) throws IdentityRuntimeException {
+    }
+
+    @Override
+    public String getName() {
+        return "default.notification.sender";
+    }
+
+    protected String getStreamDefinitionID(Event event) throws IdentityEventException {
+        return getSubscriptionProperty(STREAM_DEFINITION_ID, event.getEventName());
+    }
+
+    protected String getNotificationTemplate(Event event) throws IdentityEventException {
+        return getSubscriptionProperty(NOTIFICATION_TEMPLATE_TYPE, event.getEventName());
+    }
 }
diff --git a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationConstants.java b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationConstants.java
index 266f4f8..59c5a3a 100644
--- a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationConstants.java
+++ b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationConstants.java
@@ -23,6 +23,11 @@ public class NotificationConstants {
     private NotificationConstants() {
     }
 
+    public static final String TEMPLATE_TYPE = "TEMPLATE_TYPE";
+    public static final String CLAIM_URI_LOCALE = "http://wso2.org/claims/locality";
+    public static final String ARBITRARY_SEND_TO = "send-to";
+    public static final String ARBITRARY_BODY = "body";
+
     public static class EmailNotification {
         public static final String EMAIL_TEMPLATE_PATH = "identity/Email/";
         public static final String EMAIL_TEMPLATE_TYPE = "TEMPLATE_TYPE";
@@ -65,4 +70,12 @@ public class NotificationConstants {
         public static final String CARBON_PRODUCT_URL_TEMPLATE_PLACEHOLDER = "carbon.product-url";
 
     }
+
+    public static class SMSNotification {
+        public static final String CLAIM_URI_MOBILE = "http://wso2.org/claims/mobile";
+
+        public static final String STREAM_ID = "id_gov_sms_notify_stream:1.0.0";
+        public static final String STREAM_NAME = "id_gov_sms_notify_stream";
+        public static final String STREAM_VERSION = "1.0.0";
+    }
 }
diff --git a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationHandler.java b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationHandler.java
index 221f566..37aaea7 100644
--- a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationHandler.java
+++ b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/NotificationHandler.java
@@ -18,6 +18,7 @@
 
 package org.wso2.carbon.identity.event.handler.notification;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.wso2.carbon.event.stream.core.EventStreamService;
@@ -35,23 +36,40 @@ import org.wso2.carbon.email.mgt.util.I18nEmailUtil;
 import java.util.HashMap;
 import java.util.Map;
 
-public class NotificationHandler extends AbstractEventHandler {
+/**
+ * This is the Email and SMS Notification Handler which connected to the direct CEP stream.
+ * Extended from the DefaultNotificationHandler which is define the default notification send.
+ *
+ */
+public class NotificationHandler extends DefaultNotificationHandler {
 
     private static final Log log = LogFactory.getLog(NotificationHandler.class);
+    private static final String STREAM_ID = "id_gov_notify_stream";
 
     @Override
     public void handleEvent(Event event) throws IdentityEventException {
-
-        Map<String, String> placeHolderData = new HashMap<>();
-
+        //We can set the notification template from the identity-even.properties file as a property of the subscription
+        //property. Then it will get the first priority.
+        String notificationTemplate = getNotificationTemplate(event);
+        if(StringUtils.isNotEmpty(notificationTemplate)){
+            event.getEventProperties().put(NotificationConstants.EmailNotification.EMAIL_TEMPLATE_TYPE,
+                    notificationTemplate);
+        }
+        Map<String, String> arbitraryDataMap = new HashMap<>();
         for (Map.Entry<String, Object> entry : event.getEventProperties().entrySet()) {
             if (entry.getValue() instanceof String) {
-                placeHolderData.put(entry.getKey(), (String) entry.getValue());
+                arbitraryDataMap.put(entry.getKey(), (String) entry.getValue());
             }
         }
+        Notification notification = NotificationUtil.buildNotification(event, arbitraryDataMap);
+
+        //Stream definition will be read from the the identity-even.properties file as a property of the subscription
+        //property. Then it will get the first priority.
+        String streamDefinitionID = getStreamDefinitionID(event);
+        //This stream-id was set to the map to pass to the publishToStream method only to avoid API change.
+        arbitraryDataMap.put("tmp-stream-id", streamDefinitionID);
 
-        Notification notification = NotificationUtil.buildNotification(event, placeHolderData);
-        publishToStream(notification, placeHolderData);
+        publishToStream(notification, arbitraryDataMap);
     }
 
     protected void publishToStream(Notification notification, Map<String, String> placeHolderDataMap) {
@@ -62,9 +80,10 @@ public class NotificationHandler extends AbstractEventHandler {
         databridgeEvent.setTimeStamp(System.currentTimeMillis());
         Map<String, String> arbitraryDataMap = new HashMap<>();
 
-        databridgeEvent.setStreamId(NotificationConstants.EmailNotification.STREAM_ID);
+        databridgeEvent.setStreamId(arbitraryDataMap.remove("tmp-stream-id"));
 
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_EVENT_TYPE, I18nEmailUtil.getNormalizedName(notification.getTemplate().getTemplateDisplayName()));
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_EVENT_TYPE, I18nEmailUtil.
+                getNormalizedName(notification.getTemplate().getTemplateDisplayName()));
         arbitraryDataMap.put(IdentityEventConstants.EventProperty.USER_NAME,
                 placeHolderDataMap.get(IdentityEventConstants.EventProperty.USER_NAME));
         arbitraryDataMap.put(IdentityEventConstants.EventProperty.USER_STORE_DOMAIN,
@@ -75,11 +94,16 @@ public class NotificationHandler extends AbstractEventHandler {
         for (Map.Entry<String, String> placeHolderDataEntry : placeHolderDataMap.entrySet()) {
             arbitraryDataMap.put(placeHolderDataEntry.getKey(), placeHolderDataEntry.getValue());
         }
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_SUBJECT_TEMPLATE, notification.getTemplate().getSubject());
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_BODY_TEMPLATE, notification.getTemplate().getBody());
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_FOOTER_TEMPLATE, notification.getTemplate().getFooter());
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_LOCALE, notification.getTemplate().getLocale());
-        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_CONTENT_TYPE, notification.getTemplate().getEmailContentType());
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_SUBJECT_TEMPLATE, notification.
+                getTemplate().getSubject());
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_BODY_TEMPLATE, notification.
+                getTemplate().getBody());
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_FOOTER_TEMPLATE, notification.
+                getTemplate().getFooter());
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_LOCALE, notification.getTemplate().
+                getLocale());
+        arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_CONTENT_TYPE, notification.
+                getTemplate().getEmailContentType());
         arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_SEND_TO, notification.getSendTo());
         arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_SUBJECT, notification.getSubject());
         arbitraryDataMap.put(NotificationConstants.EmailNotification.ARBITRARY_BODY, notification.getBody());
@@ -90,8 +114,14 @@ public class NotificationHandler extends AbstractEventHandler {
         service.publish(databridgeEvent);
     }
 
+
     @Override
-    public void init(InitConfig configuration) throws IdentityRuntimeException {
+    public String getStreamDefinitionID(Event event) throws IdentityEventException {
+        String streamDefinitionID = super.getStreamDefinitionID(event);
+        if(StringUtils.isEmpty(streamDefinitionID)){
+            streamDefinitionID = STREAM_ID ;
+        }
+        return streamDefinitionID;
     }
 
     @Override
diff --git a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/internal/NotificationHandlerServiceComponent.java b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/internal/NotificationHandlerServiceComponent.java
index 616db4b..7e0c5c9 100644
--- a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/internal/NotificationHandlerServiceComponent.java
+++ b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/internal/NotificationHandlerServiceComponent.java
@@ -56,6 +56,7 @@ public class NotificationHandlerServiceComponent {
 
     protected void activate(ComponentContext context) {
         try {
+            context.getBundleContext().registerService(AbstractEventHandler.class.getName(), new NotificationHandler(), null);
             context.getBundleContext().registerService(AbstractEventHandler.class.getName(), new NotificationHandler(), null);
             context.getBundleContext().registerService(TenantMgtListener.class.getName(),
                     new NotificationEventTenantListener(), null);
diff --git a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/util/NotificationUtil.java b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/util/NotificationUtil.java
index 5253ade..b1c57c5 100644
--- a/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/util/NotificationUtil.java
+++ b/components/event-handler-notification/org.wso2.carbon.identity.event.handler.notification/src/main/java/org/wso2/carbon/identity/event/handler/notification/util/NotificationUtil.java
@@ -200,7 +200,9 @@ public class NotificationUtil {
 
     public static Notification buildNotification(Event event, Map<String, String> placeHolderData)
             throws IdentityEventException, NotificationRuntimeException {
-        String sendTo = null;
+        //send-to parameter will be set by the event senders. Here it is first read from the request parameter and
+        //if it is not there, then assume this sent-to parameter should read from user's email claim only.
+        String sendTo = placeHolderData.get(NotificationConstants.EmailNotification.ARBITRARY_SEND_TO);
         Map<String, String> userClaims = new HashMap<>();
         String notificationEvent = (String) event.getEventProperties().get(NotificationConstants.EmailNotification.EMAIL_TEMPLATE_TYPE);
         String username = (String) event.getEventProperties().get(IdentityEventConstants.EventProperty.USER_NAME);
@@ -221,13 +223,15 @@ public class NotificationUtil {
         if (userClaims.containsKey(NotificationConstants.EmailNotification.CLAIM_URI_LOCALE)) {
             locale = userClaims.get(NotificationConstants.EmailNotification.CLAIM_URI_LOCALE);
         }
-
-        if (userClaims.containsKey(NotificationConstants.EmailNotification.CLAIM_URI_EMAIL)) {
-            sendTo = userClaims.get(NotificationConstants.EmailNotification.CLAIM_URI_EMAIL);
-        }
-        if (StringUtils.isEmpty(sendTo)) {
-            throw NotificationRuntimeException.error(
-                    "Email notification sending failed. Sending email address is not configured for the user.");
+        //Only sendTo value read from claims if it is not set the event sender.
+        if(StringUtils.isEmpty(sendTo)) {
+            if (userClaims.containsKey(NotificationConstants.EmailNotification.CLAIM_URI_EMAIL)) {
+                sendTo = userClaims.get(NotificationConstants.EmailNotification.CLAIM_URI_EMAIL);
+            }
+            if (StringUtils.isEmpty(sendTo)) {
+                throw NotificationRuntimeException.error(
+                        "Email notification sending failed. Sending email address is not configured for the user.");
+            }
         }
 
         EmailTemplate emailTemplate;
diff --git a/pom.xml b/pom.xml
index 36a7a60..4304651 100644
--- a/pom.xml
+++ b/pom.xml
@@ -411,7 +411,7 @@
         <carbon.commons.imp.pkg.version>[4.4.0, 5.0.0)</carbon.commons.imp.pkg.version>
 
         <!--Carbon Identity Framework Version-->
-        <carbon.identity.framework.version>5.11.220</carbon.identity.framework.version>
+        <carbon.identity.framework.version>5.12.153</carbon.identity.framework.version>
         <carbon.identity.framework.imp.pkg.version.range>[5.11.0, 6.0.0)</carbon.identity.framework.imp.pkg.version.range>
 
         <!--Identity Governance Version-->
